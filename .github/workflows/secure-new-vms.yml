name: Secure New Azure VMs

on:
  # Remove the schedule section entirely to stop it from running automatically
  # schedule:
  #   - cron: "*/10 * * * *"  # Runs every 10 minutes to check for new VMs
  workflow_dispatch:  # Allows manual triggering

jobs:
  check-new-vms:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # 1Ô∏è‚É£ Detect New VMs
      - name: Check for Recently Created VMs
        id: check_vms
        run: |
          NEW_VM=$(az vm list --resource-group ${{ secrets.AZURE_RG }} \
          --query "[?timeCreated >= '$(date -d '-10 minutes' --utc +%Y-%m-%dT%H:%M:%SZ)'].{Name:name}" -o tsv)

          if [ -z "$NEW_VM" ]; then
            echo "No new VMs detected."
            exit 0
          else
            echo "New VM detected: $NEW_VM"
            echo "VM_NAME=$NEW_VM" >> $GITHUB_ENV
          fi

      # 2Ô∏è‚É£ Run Azure Policy Compliance Scan
      - name: Run Azure Policy Compliance Scan
        if: env.VM_NAME != ''
        id: compliance_check
        run: |
          RESULT=$(az policy state summarize \
            --resource "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Compute/virtualMachines/${{ env.VM_NAME }}" \
            --query "results[?compliant == false]" -o tsv)

          if [ -n "$RESULT" ]; then
            echo "non_compliant=true" >> $GITHUB_ENV
          else
            echo "non_compliant=false" >> $GITHUB_ENV
          fi

      # 3Ô∏è‚É£ Shutdown Non-Compliant VM
      - name: Shutdown Non-Compliant VM
        if: env.non_compliant == 'true'
        run: |
          echo "Non-compliant VM detected. Shutting down ${{ env.VM_NAME }}"
          az vm deallocate \
            --resource-group ${{ secrets.AZURE_RG }} \
            --name ${{ env.VM_NAME }}
            
    # Quarantine Non-Compliant VM Instead of Shutdown
      - name: Quarantine Non-Compliant VM
        if: env.non_compliant == 'true'
        run: |
          echo "Non-compliant VM detected. Moving ${{ env.VM_NAME }} to quarantine."
          NIC_ID=$(az vm show \
            --resource-group ${{ secrets.AZURE_RG }} \
            --name ${{ env.VM_NAME }} \
            --query 'networkProfile.networkInterfaces[0].id' -o tsv)

          az network nic update \
            --ids $NIC_ID \
            --network-security-group ${{ secrets.QUARANTINE_NSG_ID }}

          az resource tag \
            --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Compute/virtualMachines/${{ env.VM_NAME }}" \
            --tags quarantine=true reason=non_compliance

      # 4Ô∏è‚É£ Apply OS Updates via Azure Update Manager
      - name: Apply Windows Updates
        if: env.VM_NAME != '' && env.non_compliant == 'false'
        run: |
          az update-management machine-update install \
            --resource-group ${{ secrets.AZURE_RG }} \
            --machine-name ${{ env.VM_NAME }} \
            --windows-category SecurityAndCritical \
            --reboot-setting IfRequired

      # 5Ô∏è‚É£ Enable Microsoft Defender for Servers
      - name: Enable Microsoft Defender
        if: env.VM_NAME != '' && env.non_compliant == 'false'
        run: |
          az security pricing create \
            --name VirtualMachines \
            --tier Standard

      # 6Ô∏è‚É£ Onboard VM to Microsoft Sentinel
      - name: Onboard VM to Microsoft Sentinel
        if: env.VM_NAME != '' && env.non_compliant == 'false'
        run: |
          az security workspace-setting create \
            --name SentinelWorkspace \
            --target-workspace /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.OperationalInsights/workspaces/${{ secrets.AZURE_WORKSPACE }}

      # 7Ô∏è‚É£ Tag VM
      - name: Apply Tags to VM
        if: env.VM_NAME != '' && env.non_compliant == 'false'
        run: |
          az resource tag \
            --ids "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Compute/virtualMachines/${{ env.VM_NAME }}" \
            --tags environment=production owner=automation compliance=verified

      # 8Ô∏è‚É£ Enable Just-in-Time VM Access
      - name: Enable Just-in-Time VM Access
        if: env.VM_NAME != '' && env.non_compliant == 'false'
        run: |
          az security jit-policy create \
            --location ${{ secrets.AZURE_REGION }} \
            --name jit-policy \
            --resource-id "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RG }}/providers/Microsoft.Compute/virtualMachines/${{ env.VM_NAME }}" \
            --ports '[{"number":22,"protocol":"*","allowedSourceAddressPrefix":"*","maxRequestAccessDuration":"PT3H"}]'

      # 9Ô∏è‚É£ Notify via Webhook (Optional)
      - name: Notify via Webhook
        if: env.VM_NAME != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"üîí VM Secured: ${{ env.VM_NAME }} | Compliance: ${{ env.non_compliant }}"}' \
            ${{ secrets.TEAMS_WEBHOOK_URL }}
